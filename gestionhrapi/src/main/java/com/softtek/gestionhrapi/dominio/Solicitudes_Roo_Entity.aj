// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.softtek.gestionhrapi.dominio;

import com.softtek.gestionhrapi.dominio.Solicitudes;
import java.math.BigDecimal;
import java.util.List;ยก
import javax.persistence.Entity;
import javax.persistence.EntityManager;ยก
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Solicitudes_Roo_Entity {
    
    declare @type: Solicitudes: @Entity;
    
    declare @type: Solicitudes: @Table(name = "SOLICITUDES", schema = "FORMACION");
    
    @PersistenceContext
    transient EntityManager Solicitudes.entityManager;
    
    @Transactional
    public void Solicitudes.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Solicitudes.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Solicitudes attached = Solicitudes.findSolicitudes(this.idSolicitud);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Solicitudes.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Solicitudes.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Solicitudes Solicitudes.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Solicitudes merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Solicitudes.entityManager() {
        EntityManager em = new Solicitudes().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Solicitudes.countSolicitudeses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Solicitudes o", Long.class).getSingleResult();
    }
    
    public static List<Solicitudes> Solicitudes.findAllSolicitudeses() {
        return entityManager().createQuery("SELECT o FROM Solicitudes o", Solicitudes.class).getResultList();
    }
    
    public static Solicitudes Solicitudes.findSolicitudes(BigDecimal idSolicitud) {
        if (idSolicitud == null) return null;
        return entityManager().find(Solicitudes.class, idSolicitud);
    }
    
    public static List<Solicitudes> Solicitudes.findSolicitudesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Solicitudes o", Solicitudes.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
